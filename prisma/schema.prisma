// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model Account {
//   id                 String    @id @default(cuid())
//   userId             Int
//   providerType       String
//   providerId         String
//   providerAccountId  String
//   refreshToken       String?
//   accessToken        String?
//   accessTokenExpires DateTime?
//   createdAt          DateTime  @default(now())
//   updatedAt          DateTime  @updatedAt
//   user               User      @relation(fields: [userId], references: [id])

//   @@unique([providerId, providerAccountId])
// }

// model Session {
//   id           String   @id @default(cuid())
//   userId       Int
//   expires      DateTime
//   sessionToken String   @unique
//   accessToken  String   @unique
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @updatedAt
//   user         User     @relation(fields: [userId], references: [id])
// }

// model VerificationRequest {
//   id         String   @id @default(cuid())
//   identifier String
//   token      String   @unique
//   expires    DateTime
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt

//   @@unique([identifier, token])
// }

// model User {
//   id            Int       @id @default(autoincrement())
//   name          String?
//   email         String    @unique
//   emailVerified DateTime?
//   image         String?
//   createdAt     DateTime  @default(now())
//   updatedAt     DateTime  @updatedAt
//   accounts      Account[]
//   sessions      Session[]
//   invoices      Invoice[]
// }

model Client {
  id            Int       @id @default(autoincrement())
  clientName    String
  clientEmail   String
  clientAddress Address   @relation(fields: [addressId], references: [id])
  Invoice       Invoice[]
  addressId     Int

  @@unique(name: "clientInfo", [clientName, clientEmail])
}

model Invoice {
  id            String   @id
  createdAt     DateTime @default(now())
  paymentDue    DateTime
  description   String
  paymentTerms  Int
  status        Status
  client        Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId      Int
  item          Item[]
  total         Float
  senderAddress Address  @relation(fields: [addressId], references: [id], onDelete: Cascade)
  addressId     Int
}

model Address {
  id       Int       @id @default(autoincrement())
  street   String
  city     String
  postCode String
  country  String
  invoices Invoice[]
  Client   Client[]

  @@unique(name: "address", [street, city, postCode, country])
}

enum Status {
  Paid
  Pending
  Draft
}

model Item {
  id        Int     @id @default(autoincrement())
  name      String
  quantity  Int
  price     Float
  total     Float
  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId String
}
